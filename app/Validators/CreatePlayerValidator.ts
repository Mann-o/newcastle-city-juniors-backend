import { schema, rules } from '@ioc:Adonis/Core/Validator'

export default class CreatePlayerValidator {
  public schema = schema.create({
    parentId: schema.number(),
    firstName: schema.string({ escape: true, trim: true }, [rules.maxLength(255)]),
    middleNames: schema.string.nullableAndOptional({ escape: true, trim: true }, [rules.maxLength(255)]),
    lastName: schema.string({ escape: true, trim: true }, [rules.maxLength(255)]),
    dateOfBirth: schema.date({ format: 'yyyy-MM-dd' }),
    sex: schema.enum(['male', 'female'] as const),
    medicalConditions: schema.string(),
    identityVerificationPhoto: schema.file(),
    ageVerificationPhoto: schema.file(),
    mediaConsented: schema.boolean(),
    ageGroup: schema.string(),
    team: schema.string(),
    secondTeam: schema.string.nullableAndOptional(),
    membershipFeeOption: schema.enum(['upfront', 'subscription']),
    paymentDate: schema.number.nullableAndOptional([rules.range(1, 15), rules.requiredWhen('membershipFeeOption', '=', 'subscription')]),
    acceptedCodeOfConduct: schema.boolean([rules.isTrue()]),
    acceptedDeclaration: schema.boolean([rules.isTrue()]),
    giftAidDeclarationAccepted: schema.boolean(),
  })

  public messages = {
    'parentId.required': `Field '{{ field }}' is required`,
    'parentId.number': `Field '{{ field }}' must be a number`,
    'firstName.string': `Field '{{ field }}' must be a string`,
    'firstName.required': `Field '{{ field }}' is required`,
    'firstName.maxLength': `Field '{{ field }}' must be a maximum of 255 characters`,
    'middleNames.string': `Field '{{ field }}' must be a string`,
    'middleNames.maxLength': `Field '{{ field }}' must be a maximum of 255 characters`,
    'lastName.string': `Field '{{ field }}' must be a string`,
    'lastName.required': `Field '{{ field }}' is required`,
    'lastName.maxLength': `Field '{{ field }}' must be a maximum of 255 characters`,
    'dateOfBirth.required': `Field '{{ field }}' is required`,
    'dateOfBirth.date': `Field '{{ field }}' must be a date in the format 'yyyy-mm-dd'`,
    'sex.enum': `Field '{{ field }}' must be 'male' or 'female'`,
    'medicalConditions.required': `Field {{ field }} is required`,
    'identityVerificationPhoto.required': `Field {{ field }} is required`,
    'identityVerificationPhoto.file': `Field {{ field }} must be a file`,
    'ageVerificationPhoto.required': `Field {{ field }} is required`,
    'ageVerificationPhoto.file': `Field {{ field }} must be a file`,
    'mediaConsented.required': `Field {{ field }} is required`,
    'mediaConsented.boolean': `Field {{ field }} must be a boolean`,
    'ageGroup.required': `Field '{{ field }}' is required`,
    'ageGroup.string': `Field '{{ field }}' must be a string`,
    'team.required': `Field '{{ field }}' is required`,
    'team.string': `Field '{{ field }}' must be a string`,
    'secondTeam.string': `Field '{{ field }}' must be a string`,
    'membershipFeeOption.required': `Field '{{ field }} is required`,
    'membershipFeeOption.enum': `Field '{{ field }} must be 'upfront' or 'subscription'`,
    'paymentDate.requiredWhen': `Field '{{ field }} is required when {{ otherField }} is '{{ values }}'`,
    'paymentDate.range': `Field '{{ field }}' must be between 1 and 15`,
    'acceptedCodeOfConduct.boolean': `Field '{{ field }}' must be a boolean`,
    'acceptedCodeOfConduct.isTrue': `Field '{{ field }}' must be true`,
    'acceptedDeclaration.boolean': `Field '{{ field }}' must be a boolean`,
    'acceptedDeclaration.isTrue': `Field '{{ field }}' must be true`,
    'giftAidDeclarationAccepted.boolean': `Field {{ field }} must be a boolean`,
  }
}
